Alban Tiacoh 

Exercice 1 


8. Le class path est le chemin jusqu'à la classe pour l'exécution, il sert à spécifier où se trouve la classe à exécuter
13. Cette propriété sert à lier au maven.compiler.source, on doit lui donner la même valeur que celle de maven.compiler.source


Exercice 2 

2. Rien ne se passe car : aucun attribut manifest principal dans target/td00-1.0-SNAPCHOT.jar 



Exercice 3
3. Ça complete la méthode system.out.println 
4. Ça propose de redéfinir la méthode toString ou toStr  
5. Ça propose de définir la méthode main et ça montre les classes qui correspondantent au mot (MalformedInputException,MarginBorder,MaximizeAction) 
6. Ça propose de définir le getter de toto (respectivement le setter en entrant set puis Ctrl+Espace)  

Exercice 4 



TD 2 

Exercice 1 
Fichiers dignent d'intérêt du projet : 

2.
POM.xml 
PrimeCollection.java
REPONSES.txt

4. git commit -m 'initial import' //Autre méthodes pour git commit 

5. On peut observer la modification entre l'ancienne version du fichier et la derniere 

8. Hash de mon premier commit : 340a4a83ee30251b33898aae57ac7f672f269f94

Exercice 2 

3.gitk le représente en ajoutant un lien de master à remote/origin/master

5. Le push est refuser -> la branche distante contient du travail que il n'ya pas en local 

6. Les branches sont fusionné et on peut accéder au deux parents 

7. Il y aurait eu un conflit et la fusion n'aurait pas été possible  

Exercice 3

2. On remarque qu'un test à été effectuer sans soucis, en modifiant le paramètre de l'assertTrue en false on obtien maintenant un failure du test, la méthode assertTrue s'assure que la condition est bien vraie 

TD shapes 

Exercice 1 

1. Pourquoi cela fonctionne t-il ? Car les champs x et y sont privé et ne sont donc visible que dans leur classe ce qui est ici le cas  

2.Les champs n'étant pas accessible en dehors de leur classe on obtient une erreur, on peut y remédier en changeant la visibilté les champs en protected ou en public 
3. Il faut que les champs d'une classe soient privés pour empêcher une mauvaise utilisation de celle ci succeptible de la modifier, 

4. Un accesseur est une méthode permettant de récupérer les valeurs des champs privées, oui il serait mieux d'en créer 




Exercice 2 

1. true puis false, car la première égalité vérifie que les addresses sont les même ce qui est le cas et la deuxième égalité bien que les objets aient les mêmes valeurs, il ne sont pas les même (addresse diff) 
3. La méthode equals() est appelée

Exercice 3 
2. Le point n'est pas ajouté ou il y a une exception levée 


5. On a une NullPointerException si null est passé en paramètre à contains, si on ajoute null à add, rien ne se passe 

6.pointCapacity n'a plus de sens, cependant les 2 autres méthodes fonctionnent toujours

Exercice 4 


5. La translation s'effectue sur le même objet Point, on évite ceci en créant un nouvel objet ayant les mêmes param                

6.Le problème serait que le point n'est pas translater car il faudrait créer une copie défensive, cependant comme on crée un objet différent le problème est déjà résolu
  
9.Oui, il serait plus logique de la mettre en statique étant donné qu'elle n'est
 pas propre à un objet

Exercice 5

1.Oui, il est assez logique d'utiliser l'héritage ici.
4. C'est la méthode toString() de la classe mère qui est appelée, et elle ne prend pas en compte le rayon interne..

TD MVC 

Exercice 1 

1. 

2. 

3. 

4. 

5. Lorsque l'on interagit avec la fenêtre 

6. Le package java.awt est HeavyWeight tandis que le package java.swing est LightWeight 

Exercice 2



TD Iterable 


Exercice 1 



